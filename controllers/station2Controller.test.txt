const station2Controller = require("./station2Controller.test");
const stationSchema = require("../models/stationModel")

jest.mock("../models/stationModel"); // Mock the stationModel module

describe('station2Controller', () => {
  describe('searchStation', () => {
    it("should return a result", async () => {
      const req = { query: { station_name: "Test station" } };
      const res = { json: jest.fn() };
      const expected = [{ name: "Test station" }];

      stationSchema.aggregate.mockResolvedValue(expected); // Mock the result of the aggregate query

      await station2Controller.searchStation(req, res);

      expect(res.json).toHaveBeenCalledWith(expected);
    });

    it("should handle errors", async () => {
      const req = { query: { station_name: "Test station" } };
      const res = { status: jest.fn().mockReturnThis(), send: jest.fn() };
      const error = new Error("Test Error");

      stationSchema.aggregate.mockRejectedValue(error); // Mock the error from the aggregate query

      await station2Controller.searchStation(req, res);

      expect(res.status).toHaveBeenCalledWith(500);
      expect(res.send).toHaveBeenCalledWith({ message: error.message });
    });
  });
});
